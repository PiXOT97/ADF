{
	"name": "ds_GOLD_RDI",
	"properties": {
		"folder": {
			"name": "ds_PROFI/ds_GOLD"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_main_ParquetPath",
						"type": "DatasetReference"
					},
					"name": "InputTransactions"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "RemoveNull",
					"description": "Remove Null BrandId,LocationId, TransactionId, SkuId, ProductId"
				},
				{
					"name": "AddColumns"
				},
				{
					"name": "RankByQty"
				},
				{
					"name": "MaxTransactionPerSku"
				},
				{
					"name": "JoinRankandMaxTransaction"
				},
				{
					"name": "CalcQuantityPercentageRank"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "stringify1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          transactionId as long,",
				"          receiptId as long,",
				"          actionType as string,",
				"          locationId as integer,",
				"          locationName as string,",
				"          clientId as long,",
				"          mediumType as string,",
				"          externalBrandId as integer,",
				"          brandName as string,",
				"          externalProductId as integer,",
				"          productName as string,",
				"          skuId as integer,",
				"          skuName as string,",
				"          barcode as long,",
				"          paymentMode as string,",
				"          quantity as double,",
				"          price as double,",
				"          discount as double,",
				"          grossRetailAmt as double,",
				"          grossTransAmt as double,",
				"          netRetailAmt as double,",
				"          netTransAmt as double,",
				"          date as string,",
				"          timestamp as string,",
				"          transactionFile as string,",
				"          transactionFileDate as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> InputTransactions",
				"InputTransactions filter(!isNull(transactionId) && !isNan(transactionId) && \r",
				"!isNull(locationId) && !isNan(locationId) && \r",
				"!isNull(externalBrandId) && !isNan(externalBrandId) && \r",
				"!isNull(skuId) && !isNan(skuId) && \r",
				"!isNull(externalProductId) && !isNan(externalProductId) &&\r",
				"quantity >= 0) ~> RemoveNull",
				"RemoveNull derive(isPromotion = iif(discount>0,1,0),",
				"          transactionDate = toTimestamp(concat(date, ' ', timestamp), 'dd.MM.yyyy HH:mm:ss')) ~> AddColumns",
				"InputTransactions window(over(skuId),",
				"     asc(quantity, true),",
				"     rowNumberQuantity = rowNumber()) ~> RankByQty",
				"RankByQty aggregate(groupBy(skuId),",
				"     totalTransactionsSku = count(rowNumberQuantity)) ~> MaxTransactionPerSku",
				"RankByQty, MaxTransactionPerSku join(InputTransactions@skuId == MaxTransactionPerSku@skuId,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinRankandMaxTransaction",
				"JoinRankandMaxTransaction derive(rankPercentageQuantity = (rowNumberQuantity-1)/(totalTransactionsSku-1),",
				"          q1Quantity = 0.25 * (totalTransactionsSku - 1),",
				"          q3Quantity = 0.75 * (totalTransactionsSku - 1)) ~> CalcQuantityPercentageRank",
				"CalcQuantityPercentageRank derive(q1Floor = floor(q1Quantity),",
				"          q1Ceil = ceil(q1Quantity),",
				"          q1Fraction = q1Quantity- floor(q1Quantity),",
				"          q3Floor = floor(q3Quantity),",
				"          q3Ceil = ceil(q3Quantity),",
				"          q3Fraction = q3Quantity- floor(q3Quantity)) ~> derivedColumn1",
				"MaxTransactionPerSku stringify(format: 'json') ~> stringify1"
			]
		}
	}
}