{
	"name": "ds_BTS_TRANSACTION",
	"properties": {
		"folder": {
			"name": "ds_PROFI/ds_BTS"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_main_ParquetPath",
						"type": "DatasetReference"
					},
					"name": "TransactionDataFile"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_main_ParquetPath",
						"type": "DatasetReference"
					},
					"name": "OutputParquet"
				},
				{
					"dataset": {
						"referenceName": "ds_main_TXTFile",
						"type": "DatasetReference"
					},
					"name": "OutputPaths"
				}
			],
			"transformations": [
				{
					"name": "DropAndRename"
				},
				{
					"name": "CreateNewColumns"
				},
				{
					"name": "UninquePaths"
				},
				{
					"name": "PathColumn"
				}
			],
			"scriptLines": [
				"parameters{",
				"     file_to_processs as string,",
				"     path_container as string,",
				"     path_s_transaction_config as string,",
				"     path_s_transaction_input as string",
				"}",
				"source(output(",
				"          transaction_id as long,",
				"          store_name as string,",
				"          store_id as integer,",
				"          sales_chanel as string,",
				"          client_id as long,",
				"          date as string,",
				"          timestamp as string,",
				"          brand as string,",
				"          brand_id as integer,",
				"          product_name as string,",
				"          product_id as integer,",
				"          sku_id as integer,",
				"          sku_name as string,",
				"          sales_barcode as long,",
				"          catalog_name as string,",
				"          catalog_id as integer,",
				"          quantity as double,",
				"          price as double,",
				"          discount as double,",
				"          payment_mode as string,",
				"          gross_retail_amt as double,",
				"          gross_trans_amt as double,",
				"          net_retail_amt as double,",
				"          net_trans_amt as double",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> TransactionDataFile",
				"CreateNewColumns select(mapColumn(",
				"          transactionId = transaction_id,",
				"          receiptId,",
				"          actionType,",
				"          locationId = store_id,",
				"          locationName = store_name,",
				"          clientId = client_id,",
				"          mediumType = sales_chanel,",
				"          externalBrandId = brand_id,",
				"          brandName = brand,",
				"          externalProductId = product_id,",
				"          productName = product_name,",
				"          skuId = sku_id,",
				"          skuName = sku_name,",
				"          barcode = sales_barcode,",
				"          paymentMode = payment_mode,",
				"          quantity,",
				"          price,",
				"          discount,",
				"          grossRetailAmt = gross_retail_amt,",
				"          grossTransAmt = gross_trans_amt,",
				"          netRetailAmt = net_retail_amt,",
				"          netTransAmt = net_trans_amt,",
				"          date,",
				"          timestamp,",
				"          transactionFile,",
				"          transactionFileDate,",
				"          dayColumn,",
				"          monthColumn,",
				"          yearColumn",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> DropAndRename",
				"TransactionDataFile derive(actionType = 'sales',",
				"          transactionFile = toString($file_to_processs),",
				"          transactionFileDate = currentDate(),",
				"          receiptId = transaction_id,",
				"          dayColumn = toString(dayOfMonth(toDate(date,\"dd.MM.yyyy\"))),",
				"          monthColumn = toString(month(toDate(date,\"dd.MM.yyyy\"))),",
				"          yearColumn = toString(year(toDate(date,\"dd.MM.yyyy\")))) ~> CreateNewColumns",
				"PathColumn aggregate(groupBy(fullPath),",
				"     count = count(transactionId)) ~> UninquePaths",
				"DropAndRename derive(fullPath = concat($path_container,'/',$path_s_transaction_input,'/yearColumn=', yearColumn,'/monthColumn=', monthColumn, '/dayColumn=', dayColumn)) ~> PathColumn",
				"DropAndRename sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          transactionId,",
				"          receiptId,",
				"          actionType,",
				"          locationId,",
				"          locationName,",
				"          clientId,",
				"          mediumType,",
				"          externalBrandId,",
				"          brandName,",
				"          externalProductId,",
				"          productName,",
				"          skuId,",
				"          skuName,",
				"          barcode,",
				"          paymentMode,",
				"          quantity,",
				"          price,",
				"          discount,",
				"          grossRetailAmt,",
				"          grossTransAmt,",
				"          netRetailAmt,",
				"          netTransAmt,",
				"          date,",
				"          timestamp,",
				"          transactionFile,",
				"          transactionFileDate,",
				"          dayColumn,",
				"          monthColumn,",
				"          yearColumn",
				"     ),",
				"     partitionBy('key',",
				"          0,",
				"          yearColumn,",
				"          monthColumn,",
				"          dayColumn",
				"     )) ~> OutputParquet",
				"UninquePaths sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['trsancation_paths.txt'],",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          fullPath",
				"     ),",
				"     partitionBy('hash', 1)) ~> OutputPaths"
			]
		}
	}
}